#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('AngularJS:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4071');
app.set('port', port);

/**
 * Create HTTP server.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

var commandLineArgs = require("command-line-args");
var debug = require('debug')('PlatalyticsFrontEnd');
var app = require('../app');

var CLIOptions = [
  { name: "db", type: String, defaultValue: "test", description: "[bold]{Default: localhost} -- Host for db"},
  { name: "dbHost", type: String, defaultValue: "10.0.5.64", description: "[bold]{Default: 10.0.5.64} -- Host for db"},
  { name: "dbPort", type: Number, defaultValue: 9876, description: "[bold]{Default: 9876} -- Port for db"},
  { name: "backEndHost", type: String, defaultValue: "10.0.5.64", description: "[bold]{Default: 10.0.5.64} -- Host for frontend app."},
  { name: "backEndPort", type: Number, defaultValue: 7777, description: "[bold]{Default: 7777} -- Port for frontend app."},
  { name: "frontEndHost", type: String, defaultValue: "localhost", description: "[bold]{Default: localhost} -- Host for frontend app."},
  { name: "frontEndPort", type: Number, defaultValue: 5000, description: "[bold]{Default: 5000} -- Port for frontend app."},
  { name: "processId", type: String, defaultValue: "5c51641b607a223b3ef0ea61", description: "[bold]{Default: } -- process ID"},
  { name: "smartSinkId", type: String, defaultValue: "5c51641b3742c52e5df7c8a3", description: "[bold]{Default: } -- smart Sink ID"}
];

var cli = commandLineArgs(CLIOptions);
GLOBAL.CONFIGURATIONS = cli.parse();



var server = http.createServer(app);

console.log(port)
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
